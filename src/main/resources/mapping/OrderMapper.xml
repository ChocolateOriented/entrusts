<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.entrusts.mapper.OrderMapper">
	<resultMap id="UnfreezeEntity" type="com.entrusts.module.dto.UnfreezeEntity" autoMapping="true">
		<association property="order" resultMap="BaseResultMap" ></association>
	</resultMap>
	<resultMap id="BaseResultMap" type="com.entrusts.module.entity.Order">
		<id column="order_code" jdbcType="BIGINT" property="orderCode" />
		<result column="user_code" jdbcType="CHAR" property="userCode" />
		<result column="client_time" jdbcType="TIMESTAMP" property="clientTime" />
		<result column="order_time" jdbcType="TIMESTAMP" property="orderTime" />
		<result column="trade_pair_id" jdbcType="INTEGER" property="tradePairId" />
		<result column="convert_rate" jdbcType="DECIMAL" property="convertRate" />
		<result column="trade_type" jdbcType="TINYINT" property="tradeType" />
		<result column="quantity" jdbcType="DECIMAL" property="quantity" />
		<result column="mode" jdbcType="TINYINT"    property="mode" />
		<result column="status" jdbcType="TINYINT"  property="status" />
		<result column="service_fee_rate" jdbcType="DECIMAL" property="serviceFeeRate" />
		<result column="deal_amount" jdbcType="DECIMAL" property="dealAmount" />
		<result column="deal_quantity" jdbcType="DECIMAL" property="dealQuantity" />
		<result column="lasted_deal_time" jdbcType="TIMESTAMP" property="lastedDealTime" />
		<result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
		<result column="updated_time" jdbcType="TIMESTAMP" property="updatedTime" />
		<result column="is_deleted" jdbcType="TINYINT" property="isDeleted" />
	</resultMap>
	<sql id="orderColumns">
		o.order_code AS "order_code",
		o.user_code AS "user_code",
		o.client_time AS "client_time",
		o.order_time AS "order_time",
		o.trade_pair_id AS "trade_pair_id",
		o.convert_rate AS "convert_rate",
		o.trade_type AS "trade_type",
		o.quantity AS "quantity",
		o.mode AS "mode" ,
		o.status AS "status" ,
		o.service_fee_rate AS "service_fee_rate",
		o.deal_amount AS "deal_amount",
		o.deal_quantity AS "deal_quantity" ,
		o.lasted_deal_time AS "lasted_deal_time" ,
		o.created_time AS "created_time",
		o.updated_time AS "updated_time",
		o.is_deleted AS "is_deleted"
	</sql>
	<insert id="insertOrder" parameterType="com.entrusts.module.entity.Order">
  INSERT INTO `order` (
    `order_code`,
    `user_code`,
    `client_time`,
    `order_time`,
    `trade_pair_id`,
    `convert_rate`,
    `trade_type`,
    `quantity`,
    `mode`,
    `status`,
    `created_time`,
    `updated_time`,
    `is_deleted`
    )
		values (
			#{orderCode,jdbcType=CHAR},
			#{userCode,jdbcType=VARCHAR},
			#{clientTime,jdbcType=TIMESTAMP},
			#{orderTime,jdbcType=TIMESTAMP},
			#{tradePairId,jdbcType=INTEGER},
			#{convertRate,jdbcType=DECIMAL},
			#{tradeType,jdbcType=TINYINT},
			#{quantity,jdbcType=DECIMAL},
			#{mode,jdbcType=TINYINT},
			#{status,jdbcType=TINYINT},
      now(),
      now(),
      0
		)
	</insert>

  <update id="updateOrderStatus">
	    UPDATE `order`
		    SET
		    updated_time = now(),
		    `status` = #{status}
	    WHERE
	    	order_code = #{orderCode}
  </update>

	<select id="get" resultType="com.entrusts.module.entity.Order">
		select
			o.order_code as orderCode,
			o.user_code as userCode,
			o.client_time as clientTime,
			o.order_time as orderTime,
			o.trade_pair_id as tradePairId,
			o.convert_rate as convertRate,
			o.trade_type as tradeType,
			o.quantity as quantity,
			o.amount as amount,
			o.mode as mode,
			o.status as status,
			o.service_fee_rate as serviceFeeRate,
			o.deal_amount as dealAmount,
			o.deal_quantity as dealQuantity,
			o.lasted_deal_time as lastedDealTime,
			o.created_time as createdTime,
			o.updated_time as updatedTime,
			o.is_deleted as isDeleted
		from `order` o
		where o.order_code = #{orderCode}
	</select>

	<sql id="orderCondition">
		<if test="startTime != null">
			<![CDATA[ and unix_timestamp(o.created_time) >= #{startTime} / 1000 ]]>
		</if>
		<if test="endTime != null">
			<![CDATA[ and unix_timestamp(o.created_time) <= #{endTime} / 1000 ]]>
		</if>
		<if test="direction != null">
			and o.trade_type = #{direction}
		</if>
		<if test="baseCurrency != null and baseCurrency != ''">
			and c1.alias = #{baseCurrency}
		</if>
		<if test="targetCurrency != null and targetCurrency != ''">
			and c2.alias = #{targetCurrency}
		</if>
	</sql>

	<select id="findHistoryOrderByPage" resultType="com.entrusts.module.vo.HistoryOrderView">
		select
			o.order_code as orderCode,
			o.created_time as date,
			c1.alias as baseCurrency,
			c2.alias as targetCurrency,
			if(o.trade_type = 1, 'buy', 'sell') as tradeType,
			o.convert_rate as orderPrice,
			o.deal_quantity as dealTargetQuantity,
			convert(o.convert_rate * o.deal_quantity, decimal(17,8)) as dealBaseAmount,
			convert(o.convert_rate * (o.quantity - o.deal_quantity, decimal(17,8)) as serviceFee,
			status
		from `order` o
		left join trade_pair p on o.trade_pair_id = p.id
		left join digital_currency c1 on c1.id = p.base_currency_id
		left join digital_currency c2 on c2.id = p.target_currency_id 
		where user_code = #{userCode}
		and status in (30, 40)
		<include refid="orderCondition" />
	</select>
	
	<select id="findHistoryOrderByTime" resultType="com.entrusts.module.vo.HistoryOrderView">
		select
			o.order_code as orderCode,
			o.created_time as date,
			c1.alias as baseCurrency,
			c2.alias as targetCurrency,
			if(o.trade_type = 1, 'buy', 'sell') as tradeType,
			o.convert_rate as orderPrice,
			o.deal_quantity as dealTargetQuantity,
			convert(o.convert_rate * o.deal_quantity, decimal(17,8)) as dealBaseAmount,
			convert(o.convert_rate * (o.quantity - o.deal_quantity, decimal(17,8)) as serviceFee,
			status
		from `order` o
		left join trade_pair p on o.trade_pair_id = p.id
		left join digital_currency c1 on c1.id = p.base_currency_id
		left join digital_currency c2 on c2.id = p.target_currency_id 
		where user_code = #{userCode}
		and status in (30, 40)
		<if test="orderQuery.toCreatedTime != null">
			<![CDATA[ and unix_timestamp(o.created_time) < #{orderQuery.toCreatedTime} / 1000 ]]>
		</if>
		<if test="orderQuery.startTime != null">
			<![CDATA[ and unix_timestamp(o.created_time) >= #{orderQuery.startTime} / 1000 ]]>
		</if>
		<if test="orderQuery.endTime != null">
			<![CDATA[ and unix_timestamp(o.created_time) <= #{orderQuery.endTime} / 1000 ]]>
		</if>
		<if test="orderQuery.direction != null">
			and o.trade_type = #{orderQuery.direction}
		</if>
		<if test="orderQuery.baseCurrency != null and orderQuery.baseCurrency != ''">
			and c1.alias = #{baseCurrency}
		</if>
		<if test="orderQuery.targetCurrency != null and orderQuery.targetCurrency != ''">
			and c2.alias = #{orderQuery.targetCurrency}
		</if>
		order by o.created_time desc
		limit #{limit}
	</select>
	
	<select id="countHistoryOrderByTime" resultType="long">
		select
			count(o.order_code)
		from `order` o
		left join trade_pair p on o.trade_pair_id = p.id
		left join digital_currency c1 on c1.id = p.base_currency_id
		left join digital_currency c2 on c2.id = p.target_currency_id 
		where user_code = #{userCode}
		and status in (30, 40)
		<if test="toCreatedTime != null">
			<![CDATA[ and unix_timestamp(o.created_time) < #{toCreatedTime} / 1000 ]]>
		</if>
		<include refid="orderCondition" />
	</select>
	
	<select id="findLimitHistoryOrder" resultType="com.entrusts.module.vo.HistoryOrderView">
		select
			o.order_code as orderCode,
			o.created_time as date,
			c1.alias as baseCurrency,
			c2.alias as targetCurrency,
			if(o.trade_type = 1, 'buy', 'sell') as tradeType,
			o.convert_rate as orderPrice,
			o.deal_quantity as dealTargetQuantity,
			convert(o.convert_rate * o.deal_quantity, decimal(17,8)) as dealBaseAmount,
			convert(o.convert_rate * (o.quantity - o.deal_quantity, decimal(17,8)) as serviceFee,
			status
		from `order` o
		left join trade_pair p on o.trade_pair_id = p.id
		left join digital_currency c1 on c1.id = p.base_currency_id
		left join digital_currency c2 on c2.id = p.target_currency_id 
		where user_code = #{userCode}
		and status in (30, 40)
		order by o.created_time desc
		limit #{limit}
	</select>
	
	<select id="totalHistoryOrder">
		select
			count(o.order_code)
		from `order` o
		where user_code = #{userCode}
		and status in (30, 40)
	</select>

	<update id="updateOrderNewDeal">
		update `order` set
		deal_quantity = ifnull(deal_quantity, 0) + #{dealQuantity},
		lasted_deal_time = if(unix_timestamp(lasted_deal_time) * 1000 > #{createdTime}, lasted_deal_time, from_unixtime(#{createdTime} / 1000))
		where order_code = #{orderCode}
	</update>

	<update id="completeOrder">
		update `order` set
		status = 30
		where order_code = #{orderCode}
		and status = 20
	</update>

    <select id="queryUnfreezeInfo" parameterType="String" resultMap="UnfreezeEntity">
        SELECT
        <include refid="orderColumns"/>,
        c.id AS 'encryptCurrencyId',
        p.base_currency_id AS 'baseCurrencyId',
        p.target_currency_id AS 'targetCurrencyId',
        (o.quantity-o.deal_quantity) AS 'residuequantity'
        FROM
        `order` AS o
        INNER JOIN trade_pair AS p ON o.trade_pair_id = p.id
        INNER JOIN digital_currency AS c ON p.base_currency_id = c.id
        WHERE o.order_code = #{orderCode} AND o.`status`=20
    </select>
    <select id="queryAllUnfreezeInfo" parameterType="String" resultMap="UnfreezeEntity">
        SELECT
        <include refid="orderColumns"/>,
        c.id AS 'encryptCurrencyId',
        p.base_currency_id AS 'baseCurrencyId',
        p.target_currency_id AS 'targetCurrencyId',
        (o.quantity-o.deal_quantity) AS 'residuequantity'
        FROM
        `order` AS o
        INNER JOIN trade_pair AS p ON o.trade_pair_id = p.id
        INNER JOIN digital_currency AS c ON p.base_currency_id = c.id
        WHERE o.user_code = #{userCode} AND o.`status`=20
    </select>

	<select id="findCurrentOrder" resultType="com.entrusts.module.vo.CurrentEntrusts">
		select
		o.order_code as orderCode,
		o.created_time as date,
		c1.alias as baseCurrency,
		c2.alias as targetCurrency,
		if(o.trade_type = 1, 'buy', 'sell') as tradeType,
		o.convert_rate as orderPrice,
		o.deal_quantity as dealTargetQuantity,
		convert(o.convert_rate * o.deal_quantity, decimal(17,8)) as dealBaseAmount,
		status
		from `order` o
		left join trade_pair p on o.trade_pair_id = p.id
		left join digital_currency c1 on c1.id = p.base_currency_id
		left join digital_currency c2 on c2.id = p.target_currency_id
		where user_code = #{userCode}
		and status in (10, 20)
		AND o.is_deleted ='0'
		order by o.created_time desc
	</select>

</mapper>