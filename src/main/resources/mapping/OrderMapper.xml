<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.entrusts.mapper.OrderMapper">

	<resultMap id="BaseResultMap" type="com.entrusts.module.entity.Order">
		<id column="order_code" jdbcType="BIGINT" property="orderCode" />
		<result column="user_code" jdbcType="CHAR" property="userCode" />
		<result column="client_time" jdbcType="TIMESTAMP" property="clientTime" />
		<result column="order_time" jdbcType="TIMESTAMP" property="orderTime" />
		<result column="trade_pair_id" jdbcType="INTEGER" property="tradePairId" />
		<result column="convert_rate" jdbcType="DECIMAL" property="convertRate" />
		<result column="trade_type" jdbcType="TINYINT"  property="tradeType" />
		<result column="quantity" jdbcType="DECIMAL" property="quantity" />
		<result column="amount" jdbcType="DECIMAL" property="amount" />
		<result column="mode" jdbcType="TINYINT"   property="mode" />
		<result column="status" jdbcType="TINYINT"  property="status" />
		<result column="service_fee_rate" jdbcType="DECIMAL" property="serviceFeeRate" />
		<result column="deal_amout" jdbcType="DECIMAL" property="dealAmout" />
		<result column="deal_quantity" jdbcType="DECIMAL" property="dealQuantity" />
		<result column="lasted_deal_time" jdbcType="TIMESTAMP" property="lastedDealTime" />
		<result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
		<result column="updated_time" jdbcType="TIMESTAMP" property="updatedTime" />
		<result column="is_deleted" jdbcType="TINYINT" property="isDeleted" />
	</resultMap>
	<select id="findHistoryOrderByPage" resultType="com.entrusts.module.vo.HistoryOrderView">
		select
			o.order_code as orderCode,
			o.created_time as date,
			c1.alias as baseCurrency,
			c2.alias as targetCurrency,
			if(o.trade_type = 1, 'buy', 'sell') as tradeType,
			o.convert_rate as orderPrice,
			o.deal_quantity as dealTargetQuantity,
			o.deal_amount as dealBaseAmount,
			o.deal_amount * sevice_fee_rate as serviceFee,
			status
		from `order` o
		left join trade_pair p on o.trade_pair_id = p.id
		left join digital_currency c1 on c1.id = p.base_currency_id
		left join digital_currency c2 on c2.id = p.target_currency_id
		where user_code = #{userCode}
		and status in (2, 3)
		<if test="startTime != null">
			<![CDATA[ and o.created_time >= #{startTime} ]]>
		</if>
		<if test="endTime != null">
			<![CDATA[ and o.created_time <= #{endTime} ]]>
		</if>
		<if test="direction != null">
			and o.trade_type = #{direction}
		</if>
		<if test="direction != null">
			and o.trade_type = #{direction}
		</if>
		<if test="baseCurrency != null and baseCurrency != ''">
			and c1.alias = #{baseCurrency}
		</if>
		<if test="targetCurrency != null and targetCurrency != ''">
			and c2.alias = #{targetCurrency}
		</if>
	</select>

	<select id="findHistoryOrderByTime" resultType="com.entrusts.module.vo.HistoryOrderView">
		select
			o.order_code as orderCode,
			o.created_time as date,
			c1.alias as baseCurrency,
			c2.alias as targetCurrency,
			if(o.trade_type = 1, 'buy', 'sell') as tradeType,
			o.convert_rate as orderPrice,
			o.deal_quantity as dealTargetQuantity,
			o.deal_amount as dealBaseAmount,
			o.deal_amount * sevice_fee_rate as serviceFee,
			status
		from `order` o
		left join trade_pair p on o.trade_pair_id = p.id
		left join digital_currency c1 on c1.id = p.base_currency_id
		left join digital_currency c2 on c2.id = p.target_currency_id
		where user_code = #{userCode}
		and status in (2, 3)
		<if test="toCreatedTime != null">
			<![CDATA[ and o.created_time < #{toCreatedTime} ]]>
		</if>
		<if test="startTime != null">
			<![CDATA[ and o.created_time >= #{startTime} ]]>
		</if>
		<if test="endTime != null">
			<![CDATA[ and o.created_time <= #{endTime} ]]>
		</if>
		<if test="direction != null">
			and o.trade_type = #{direction}
		</if>
		<if test="direction != null">
			and o.trade_type = #{direction}
		</if>
		<if test="baseCurrency != null and baseCurrency != ''">
			and c1.alias = #{baseCurrency}
		</if>
		<if test="targetCurrency != null and targetCurrency != ''">
			and c2.alias = #{targetCurrency}
		</if>
		order by o.created_time desc
		limit #{limit}
	</select>

	<select id="countHistoryOrderByTime" resultType="long">
		select
			count(o.order_code)
		from `order` o
		left join trade_pair p on o.trade_pair_id = p.id
		left join digital_currency c1 on c1.id = p.base_currency_id
		left join digital_currency c2 on c2.id = p.target_currency_id
		where user_code = #{userCode}
		and status in (2, 3)
		<if test="toCreatedTime != null">
			<![CDATA[ and o.created_time < #{toCreatedTime} ]]>
		</if>
		<if test="startTime != null">
			<![CDATA[ and o.created_time >= #{startTime} ]]>
		</if>
		<if test="endTime != null">
			<![CDATA[ and o.created_time <= #{endTime} ]]>
		</if>
		<if test="direction != null">
			and o.trade_type = #{direction}
		</if>
		<if test="direction != null">
			and o.trade_type = #{direction}
		</if>
		<if test="baseCurrency != null and baseCurrency != ''">
			and c1.alias = #{baseCurrency}
		</if>
		<if test="targetCurrency != null and targetCurrency != ''">
			and c2.alias = #{targetCurrency}
		</if>
	</select>

	<select id="findLimitHistoryOrder" resultType="com.entrusts.module.vo.HistoryOrderView">
		select
			o.order_code as orderCode,
			o.created_time as date,
			c1.alias as baseCurrency,
			c2.alias as targetCurrency,
			if(o.trade_type = 1, 'buy', 'sell') as tradeType,
			o.convert_rate as orderPrice,
			o.deal_quantity as dealTargetQuantity,
			o.deal_amount as dealBaseAmount,
			o.deal_amount * sevice_fee_rate as serviceFee,
			status
		from `order` o
		left join trade_pair p on o.trade_pair_id = p.id
		left join digital_currency c1 on c1.id = p.base_currency_id
		left join digital_currency c2 on c2.id = p.target_currency_id
		where user_code = #{userCode}
		and status in (2, 3)
		order by o.created_time desc
		limit #{limit}
	</select>

	<select id="getHistoryOrder" resultType="com.entrusts.module.vo.HistoryOrderView">
		select
			o.order_code as orderCode,
			o.created_time as date,
			c1.alias as baseCurrency,
			c2.alias as targetCurrency,
			if(o.trade_type = 1, 'buy', 'sell') as tradeType,
			o.convert_rate as orderPrice,
			o.deal_quantity as dealTargetQuantity,
			o.deal_amount as dealBaseAmount,
			o.deal_amount * sevice_fee_rate as serviceFee,
			status
		from `order` o
		left join trade_pair p on o.trade_pair_id = p.id
		left join digital_currency c1 on c1.id = p.base_currency_id
		left join digital_currency c2 on c2.id = p.target_currency_id
		where order_code = #{orderCode}
		and status in (2, 3)
	</select>

	<select id="totalHistoryOrder">
		select
			count(o.order_code)
		from `order` o
		where user_code = #{userCode}
		and status in (2, 3)
	</select>

	<select id="findCurrentOrderByPage" resultType="com.entrusts.module.vo.CurrentEntrusts">
		select
		o.order_code as orderCode,
		o.created_time as date,
		c1.alias as baseCurrency,
		c2.alias as targetCurrency,
		if(o.trade_type = 1, 'buy', 'sell') as tradeType,
		o.convert_rate as orderPrice,
		o.deal_quantity as dealTargetQuantity,
		o.deal_amount as dealBaseAmount,
		o.deal_amount * sevice_fee_rate as serviceFee,
		status
		from `order` o
		left join trade_pair p on o.trade_pair_id = p.id
		left join digital_currency c1 on c1.id = p.base_currency_id
		left join digital_currency c2 on c2.id = p.target_currency_id
		where user_code = #{userCode}
		and status in (10, 20)
		<if test="startTime != null">
			<![CDATA[ and o.created_time >= #{startTime} ]]>
		</if>
		<if test="endTime != null">
			<![CDATA[ and o.created_time <= #{endTime} ]]>
		</if>
		<if test="direction != null">
			and o.trade_type = #{direction}
		</if>
		<if test="direction != null">
			and o.trade_type = #{direction}
		</if>
		<if test="baseCurrency != null and baseCurrency != ''">
			and c1.alias = #{baseCurrency}
		</if>
		<if test="targetCurrency != null and targetCurrency != ''">
			and c2.alias = #{targetCurrency}
		</if>
	</select>

	<select id="findLimitCurrentOrder" resultType="com.entrusts.module.vo.CurrentEntrusts">
		select
		o.order_code as orderCode,
		o.created_time as date,
		c1.alias as baseCurrency,
		c2.alias as targetCurrency,
		if(o.trade_type = 1, 'buy', 'sell') as tradeType,
		o.convert_rate as orderPrice,
		o.deal_quantity as dealTargetQuantity,
		o.deal_amount as dealBaseAmount,
		o.deal_amount * sevice_fee_rate as serviceFee,
		status
		from `order` o
		left join trade_pair p on o.trade_pair_id = p.id
		left join digital_currency c1 on c1.id = p.base_currency_id
		left join digital_currency c2 on c2.id = p.target_currency_id
		where user_code = #{userCode}
		and status in (10, 20)
		AND is_deleted ='0'
		order by o.created_time desc
		limit #{limit}
	</select>

	<select id="countCurrentOrderByTime" resultType="long">
		select
		count(o.order_code)
		from `order` o
		left join trade_pair p on o.trade_pair_id = p.id
		left join digital_currency c1 on c1.id = p.base_currency_id
		left join digital_currency c2 on c2.id = p.target_currency_id
		where user_code = #{userCode}
		and status in (10, 20)
		<if test="toCreatedTime != null">
			<![CDATA[ and o.created_time < #{toCreatedTime} ]]>
		</if>
		<if test="startTime != null">
			<![CDATA[ and o.created_time >= #{startTime} ]]>
		</if>
		<if test="endTime != null">
			<![CDATA[ and o.created_time <= #{endTime} ]]>
		</if>
		<if test="direction != null">
			and o.trade_type = #{direction}
		</if>
		<if test="direction != null">
			and o.trade_type = #{direction}
		</if>
		<if test="baseCurrency != null and baseCurrency != ''">
			and c1.alias = #{baseCurrency}
		</if>
		<if test="targetCurrency != null and targetCurrency != ''">
			and c2.alias = #{targetCurrency}
		</if>
	</select>

	<select id="findCurrentOrderByTime" resultType="com.entrusts.module.vo.CurrentEntrusts">
		select
		o.order_code as orderCode,
		o.created_time as date,
		c1.alias as baseCurrency,
		c2.alias as targetCurrency,
		if(o.trade_type = 1, 'buy', 'sell') as tradeType,
		o.convert_rate as orderPrice,
		o.deal_quantity as dealTargetQuantity,
		o.deal_amount as dealBaseAmount,
		o.deal_amount * sevice_fee_rate as serviceFee,
		status
		from `order` o
		left join trade_pair p on o.trade_pair_id = p.id
		left join digital_currency c1 on c1.id = p.base_currency_id
		left join digital_currency c2 on c2.id = p.target_currency_id
		where user_code = #{userCode}
		and status in (10, 20)
		<if test="toCreatedTime != null">
			<![CDATA[ and o.created_time < #{toCreatedTime} ]]>
		</if>
		<if test="startTime != null">
			<![CDATA[ and o.created_time >= #{startTime} ]]>
		</if>
		<if test="endTime != null">
			<![CDATA[ and o.created_time <= #{endTime} ]]>
		</if>
		<if test="direction != null">
			and o.trade_type = #{direction}
		</if>
		<if test="direction != null">
			and o.trade_type = #{direction}
		</if>
		<if test="baseCurrency != null and baseCurrency != ''">
			and c1.alias = #{baseCurrency}
		</if>
		<if test="targetCurrency != null and targetCurrency != ''">
			and c2.alias = #{targetCurrency}
		</if>
		order by o.created_time desc
		limit #{limit}
	</select>

	<select id="getCurrentOrder" resultType="com.entrusts.module.vo.CurrentEntrusts">
		select
		o.order_code as orderCode,
		o.created_time as date,
		c1.alias as baseCurrency,
		c2.alias as targetCurrency,
		if(o.trade_type = 1, 'buy', 'sell') as tradeType,
		o.convert_rate as orderPrice,
		o.deal_quantity as dealTargetQuantity,
		o.deal_amount as dealBaseAmount,
		status
		from `order` o
		left join trade_pair p on o.trade_pair_id = p.id
		left join digital_currency c1 on c1.id = p.base_currency_id
		left join digital_currency c2 on c2.id = p.target_currency_id
		where order_code = #{orderCode}
		AND is_deleted ='0'
		and status in (10, 20)
	</select>

	<select id="totalCurrentOrder">
		select
		count(o.order_code)
		from `order` o
		where user_code = #{userCode}
		AND is_deleted ='0'
		and status in (10, 20)
	</select>

    <sql id="orderColumns">
    </sql>

    <insert id="insertOrder">
        insert into order(
        order_code,
        user_code,
        client_time,
        order_time,
        trade_pair_id,
        convert_rate,
        trade_type,
        quantity,
        amount,
        mode,
        status,
        created_time,
        updated_time,
        isDeleted
        )values (
        #{orderCode,jdbcType=BIGINT},
        #{userCode,jdbcType=VARCHAR},
        #{clientTime,jdbcType=TIMESTAMP},
        #{orderTime,jdbcType=TIMESTAMP},
        #{tradePairId,jdbcType=BIGINT},
        #{convertRate,jdbcType=DOUBLE},
        #{tradeType,jdbcType=INTEGER},
        #{quantity,jdbcType=DOUBLE},
        #{amount,jdbcType=DOUBLE},
        #{mode,jdbcType=INTEGER},
        #{status,jdbcType=INTEGER},
        now(),
        now(),
        0
        )
    </insert>

    <update id="updateOrderStatus" >
        UPDATE order
        SET
        update_date = now(),
        status = #{status}
        WHERE
        order_code = #{orderCode}
    </update>
</mapper>